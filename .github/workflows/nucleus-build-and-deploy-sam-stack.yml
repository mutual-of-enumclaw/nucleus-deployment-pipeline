name: SAM Build and Deploy
env:
  GITHUB_TOKEN: ${{ secrets.DEPLOY_USER_GITHUB_TOKEN }}
on:
  workflow_call:
    inputs:
      node-build-version:
        description: 'The version of node used in the build'
        required: false
        default: '20'
        type: string
      prebuild-command:
        description: 'Command to run before the build step'
        required: false
        type: string
      build-aws-access-key-id-name:
        description: 'The name of the secret containing the AWS access key ID used in the build step'
        required: false
        type: string
        default: 'NUCLEUS_SND_DEPLOY_USER_AWS_ACCESS_KEY_ID'
      build-aws-secret-access-key-name:
        description: 'The name of the secret containing the AWS secret access key used in the build step'
        required: false
        type: string
        default: 'NUCLEUS_SND_DEPLOY_USER_AWS_SECRET_ACCESS_KEY'

jobs:
  setup:
    name: "Setup Dependencies"
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: set node version
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-build-version}}

      - name: Generate cache key
        id: cache-key
        run: echo "key=node-modules-${{ runner.os }}-${{ inputs.node-build-version }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/.npmrc') || 'no-npmrc' }}" >> $GITHUB_OUTPUT

      - name: Cache .npmrc and node modules
        uses: actions/cache@v4
        id: cache-dependencies
        with:
          path: |
            node_modules
            ~/.npmrc
          key: ${{ steps.cache-key.outputs.key }}

      - name: 'Create .npmrc'
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        shell: bash
        run: |
            echo "Creating/Updating .npmrc in $PWD"
            # Create a new .npmrc if there isn't one there already
            [ ! -e .npmrc ] && echo "registry=https://moetech.jfrog.io/artifactory/api/npm/nucleus-npm/" > ~/.npmrc
            [ -e .npmrc ] && cp .npmrc ~/.npmrc && echo "" >> ~/.npmrc
            echo "//moetech.jfrog.io/artifactory/api/npm/nucleus-npm/:_authToken = ${{ secrets.JFROG_AUTH_TOKEN }}" >> ~/.npmrc
            echo "always-auth = true" >> ~/.npmrc

      - name: Install dependencies
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: npm ci

  sonar-scan:
    name: "SonarCloud Scan"
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: setup

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: set node version
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-build-version}}

      - name: Restore cached dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            ~/.npmrc
          key: ${{ needs.setup.outputs.cache-key }}

      - run: npm run test:coverage --if-present

      - name: SonarCloud Scan
        uses: sonarsource/sonarqube-scan-action@v5
        env:
          GITHUB_TOKEN: ${{ env.GITHUB_TOKEN}}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build-package:
    name: "Build Package"
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: setup

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: set node version
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-build-version}}

      - name: Restore cached dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            ~/.npmrc
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets[inputs.build-aws-access-key-id-name] }}
          aws-secret-access-key: ${{ secrets[inputs.build-aws-secret-access-key-name] }}
          aws-region: us-west-2

      - name: Prebuild
        if: ${{ inputs.prebuild-command != '' }}
        run: ${{ inputs.prebuild-command }}

      - name: Build Package
        run: npm run build-package -- --environments ${{ vars.ENVIRONMENTS }}

      - name: Tar files
        run: tar -cvf build-artifacts.tar ${{ github.workspace }}

      - name: Archive build directory
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build-artifacts.tar
          retention-days: 30

  Deploy:
    name: Deploy ${{ matrix.stage }} ${{github.event.repository.name}}
    
    permissions:
      contents: write
    strategy:
      matrix:
        stage: ${{ fromJson(vars.ENVIRONMENTS_MATRIX) }}
      fail-fast: false
    runs-on: ubuntu-latest
    environment:
      name: ${{ matrix.stage }}
    needs: [setup, sonar-scan, build-package]
    steps:    
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: set node version
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-build-version}}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
      - name: Extract files

        run: tar -xf build-artifacts.tar
      - name: Display structure of downloaded files
        run: ls -R

      - name: Restore cached dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            ~/.npmrc
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets[vars.AWS_ACCESS_KEY_ID_SECRET_NAME] }}
          aws-secret-access-key: ${{ secrets[vars.AWS_SECRET_ACCESS_KEY_SECRET_NAME] }}
          aws-region: us-west-2

      - name: Deploy
        run: |
          cd home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}
          npx samtsc --deploy-only --config-env ${{ matrix.stage }}

      - name: Build and Deploy Website
        if: ${{ vars.WEB_DEPLOYMENT_BUCKET_NAME_PARAM != '' && vars.AWS_REGION != '' }}
        run: |
          cd home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}
          if [[ "${{ vars.WEB_DEPLOYMENT_BUCKET_NAME_PARAM }}" == "s3://nuc-website-${{ matrix.stage }}-website" ]]; then
            aws s3 sync "s3://nuc-core-${{ vars.STAGE_NAME }}-${{ vars.AWS_REGION }}-importlookupdata/data" ./src/assets/data --exact-timestamps
          fi
          npm run setEnv -- --region ${{ vars.AWS_REGION }} --stage ${{ matrix.stage }}
          npm run build
          npm run s3sync -- ${{ vars.WEB_DEPLOYMENT_BUCKET_NAME_PARAM }}

      - name: Post Deploy
        if: ${{ vars.POST_DEPLOY_COMMAND != '' }}
        run: |
          cd home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}
          ${{ vars.POST_DEPLOY_COMMAND }}

      # üëá Notifications after everything in Deploy job
      
      - name: Notify Teams (Deploy Succeeded)
        if: ${{ success() }}
        uses: jdcargile/ms-teams-notification@v1.4
        with:
          github-token: ${{ github.token }}
          ms-teams-webhook-uri: ${{ secrets.NUCLEUS_DEPLOYMENT_ALERTS_TEAMS_WEBHOOK }}
          notification-summary: |
            ‚úÖ Deploy succeeded: ${{ github.event.repository.name }} ‚Üí ${{ matrix.stage }}
          notification-color: 28a745

      - name: Notify Teams (Deploy Failed)
        if: ${{ failure() }}
        uses: jdcargile/ms-teams-notification@v1.4
        with:
          github-token: ${{ github.token }}
          ms-teams-webhook-uri: ${{ secrets.NUCLEUS_DEPLOYMENT_ALERTS_TEAMS_WEBHOOK }}
          notification-summary: |
            ‚ùå Deploy failed: ${{ github.event.repository.name }} ‚Üí ${{ matrix.stage }}
          notification-color: dc3545

      - name: Manage Release
        uses: mutual-of-enumclaw/action-manage-release@v1
        with:
          DRAFT_RELEASE_ENV: tst
          PUBLISH_RELEASE_ENV: acc
          CURRENT_ENV: ${{ matrix.stage }}
          VERSION_TYPE: patch
          GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}

  embed-puml-markdown:
    runs-on: ubuntu-latest
    permissions:
      # Give the default GITHUB_TOKEN write permission to commit and push the
      # added or changed files to the repository.
      contents: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
          token: ${{ secrets.DEPLOY_USER_GITHUB_TOKEN }}
      
      - name: Embed PlantUML inside Markdown
        uses: alessandro-marcantoni/puml-markdown@v0.1.1

      - name: Commit changes
        shell: bash
        run: |
            git config --global user.name 'build-user-mutualofenumclaw'
            git config --global user.email 'build-user-mutualofenumclaw@users.noreply.github.com'
            git commit -am "Update diagrams" || echo "No changes to commit"
            git push || echo "No changes to push"

      - name: Update Confluence Page with README
        if: ${{ vars.CONFLUENCE_PAGE_ID != '' }}
        uses: cupcakearmy/confluence-markdown-sync@v1
        with:
          from: './README.md'
          to: ${{ vars.CONFLUENCE_PAGE_ID }}
          cloud: mutualofenumclaw
          user: ${{ secrets.CONFLUENCE_MARKDOWN_SYNC_USER }}
          token: ${{ secrets.CONFLUENCE_MARKDOWN_SYNC_API_KEY }}