name: Node.js CI

on:
 workflow_call:
    inputs:
      workingDirectory:
        description: 'Working Directory'
        default: '.'
        type: string
      NODE_VERSIONS:
        description: 'The version(s) of node to run unit tests with'
        required: false
        type: string
        default: '14.x'
      region:
        description: 'AWS Region'
        type: string
        default: 'us-west-2'
    secrets:
      JFROG_AUTH_TOKEN:
        required: true
      COVERAGE_REPORT_GIST_TOKEN:
        required: true
      AWS_ACCESS_KEY_ID:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false

jobs:
  build:

    runs-on: ${{ matrix.os }}

    defaults:
      run:
        working-directory: ${{ inputs.workingDirectory }}

    strategy:
      matrix:
        os: 
          - ubuntu-latest
        node-version: 
          - ${{ inputs.NODE_VERSIONS }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.region}}

      - name: 'Create .npmrc'
        shell: bash
        run: |
          echo "Creating/Updating .npmrc in $PWD"
          # Create a new .npmrc if there isn't one there already
          [ ! -e .npmrc ] && echo "registry=https://moetech.jfrog.io/artifactory/api/npm/nucleus-npm/" > ~/.npmrc
          [ -e .npmrc ] && cp .npmrc ~/.npmrc && echo "" >> ~/.npmrc
          echo "_authToken = ${{ secrets.JFROG_AUTH_TOKEN }}" >> ~/.npmrc
          echo "always-auth = true" >> ~/.npmrc

      - name: Use Node.js ${{ matrix.node-version }} on ${{ matrix.os }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - run: npm ci

      - run: npm run lt
      
      #  Only run the coverage once
      - if: ${{ matrix.node-version == '14.x' }}
        name: Get Coverage for badge
        run: |
          SUMMARY="$(npm run test:coverage -- --coverageReporters='text-summary' | tail -2 | head -1)"
          TOKENS=($SUMMARY)
          echo "COVERAGE=$(echo ${TOKENS[2]})" >> $GITHUB_ENV
          REF=${{ github.ref }}
          echo "github.ref: $REF"
          IFS='/' read -ra REPO <<< "$GITHUB_REPOSITORY"
          echo "REPOSITORY=$(echo ${REPO[1]})" >> $GITHUB_ENV
          echo "github.repository: $REPOSITORY"
          IFS='/' read -ra PATHS <<< "$REF"
          BRANCH_NAME="${PATHS[1]}_${PATHS[2]}"
          echo $BRANCH_NAME
          echo "BRANCH=$(echo ${BRANCH_NAME})" >> $GITHUB_ENV
      - if: ${{ matrix.node-version == '14.x' }}
        name: Create the Badge
        uses: schneegans/dynamic-badges-action@v1.0.0
        with:
          auth: ${{ secrets.COVERAGE_REPORT_GIST_TOKEN }}
          gistID: fe0dd2d20f191c9b64cbe698d93449d5
          filename: ${{ env.REPOSITORY }}__${{ env.BRANCH }}.json
          label: Test Coverage
          message: ${{ env.COVERAGE }}
          color: green
          namedLogo: jest
